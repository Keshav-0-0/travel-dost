package com.ellalee.travelmaker;

import android.content.ContentValues;
import android.content.Context;
import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteOpenHelper;
import android.os.Environment;
import android.util.Log;
import android.widget.Toast;

import com.google.android.gms.maps.GoogleMap;
import com.google.android.gms.maps.model.BitmapDescriptor;
import com.google.android.gms.maps.model.BitmapDescriptorFactory;
import com.google.android.gms.maps.model.LatLng;
import com.google.android.gms.maps.model.Marker;
import com.google.android.gms.maps.model.MarkerOptions;

import java.io.File;
import java.util.ArrayList;
import java.util.Iterator;

/**
 * Created by tyu54 on 2018-05-30.
 */

public class PlanSQLiteHelper extends SQLiteOpenHelper /*extends SQLiteOpenHelper*/ {

    // Database Version
    private static final int DATABASE_VERSION = 1;

    // Database Name
    private static final String DATABASE_NAME = "planDB";

//    private static final String FILE_PATH = Environment.getExternalStorageDirectory().getAbsolutePath() + File.separator + DATABASE_NAME;

    // Table Names
    private static final String TABLE_PLAN = "plans";
 //   private static final String TABLE_ROUTELIST = "route_lists";
    private static final String TABLE_ROUTE = "routes";
    private static final String TABLE_MARKERLIST = "marker_lists";
    private static final String TABLE_MARKER = "markers";

    // Common column names
    private static final String KEY_ID = "id";

    // PLANS Table - column names
    private static final String KEY_TITLE = "title";
    private static final String KEY_CITY = "city";
//    private static final String KEY_LATITUDE = "latitude"; duplicate
//    private static final String KEY_LONGITUDE =  "longitude";
    private static final String KEY_MONTH = "month";
    private static final String KEY_YEAR = "year";
    private static final String KEY_DAY = "day";
//    private static final String KEY_ROUTELIST_ID = "route_list_id"; //

    // ROUTELIST Table - column names
    private static final String KEY_PLAN_ID = "plan_id";
    private static final String KEY_ROUTE_ID = "route_id";

    // ROUTE Table - column names
    private static final String KEY_INDEX = "routeIndex";
//    private static final String KEY_PLAN_ID = "plan_id";
//    private static final String KEY_MARKERLIST_ID = "marker_list_id"; //

    // MARKERLIST Table - column names
    private static final String KEY_MARKER_ID = "marker_id";
//    private static final String KEY_ROUTE_ID = "route_id"; //

    // MARKER Table - column names
//    private static final String KEY_PLAN_ID = "plan_id";
    private static final String KEY_LATITUDE = "latitude";
    private static final String KEY_LONGITUDE =  "longitude";
    private static final String KEY_GET_ID = "getId";
//  private static final String KEY_TITLE =  "title"; //duplicate field
    private static final String KEY_ICON =  "icon";


    // Table Create Statements
    // Plan table create statement
    private static final String CREATE_TABLE_PLAN = "CREATE TABLE " + TABLE_PLAN + "( "
            + KEY_ID + " INTEGER PRIMARY KEY, "
            + KEY_TITLE + " TEXT, "
            + KEY_CITY + " TEXT, "
            + KEY_LATITUDE + " REAL, "
            + KEY_LONGITUDE + " REAL, "
            + KEY_MONTH + " INTEGER, "
            + KEY_YEAR + " INTEGER, "
            + KEY_DAY + " INTEGER )"; // foreign key

    /*
    // RouteList table create statement
    private static final String CREATE_TABLE_ROUTELIST = "CREATE TABLE " + TABLE_ROUTELIST + "("
            + KEY_ID + " INTEGER PRIMARY KEY,"
            + KEY_PLAN_ID + " INTEGER, "   //fk
            + KEY_ROUTE_ID + " INTEGER" + ")";  //fk
*/

    // Route table create statement
    private static final String CREATE_TABLE_ROUTE = "CREATE TABLE " + TABLE_ROUTE + "("
            + KEY_ID + " INTEGER PRIMARY KEY, "
            + KEY_PLAN_ID+ " INTEGER, "
            + KEY_INDEX + " INTEGER )"; //fk

    // MarkerList table create statement
    private static final String CREATE_TABLE_MARKERLIST = "CREATE TABLE " + TABLE_MARKERLIST + "("
            + KEY_ID + " INTEGER PRIMARY KEY, "
            + KEY_MARKER_ID + " INTEGER, "   //fk
            + KEY_ROUTE_ID + " INTEGER" + ")";  //fk

    // Route table create statement
    private static final String CREATE_TABLE_MARKER = "CREATE TABLE " + TABLE_MARKER + "("
            + KEY_ID + " INTEGER PRIMARY KEY, "
            + KEY_PLAN_ID+ " INTEGER, "
            + KEY_GET_ID + " TEXT, "
            + KEY_LATITUDE + " REAL, "
            + KEY_LONGITUDE + " REAL, "
            + KEY_TITLE + " TEXT, "
            + KEY_ICON + " INTEGER" + ")"; // enum 4

    public PlanSQLiteHelper(Context context) {
        super(context,DATABASE_NAME, null, DATABASE_VERSION);
    }

    @Override
    public void onCreate(SQLiteDatabase db) {
        db.execSQL(CREATE_TABLE_PLAN);
     //   db.execSQL(CREATE_TABLE_ROUTELIST);
        db.execSQL(CREATE_TABLE_ROUTE);
        db.execSQL(CREATE_TABLE_MARKERLIST);
        db.execSQL(CREATE_TABLE_MARKER);
    }

    @Override
    public void onUpgrade(SQLiteDatabase db, int oldV, int newV) {

        db.execSQL("DROP TABLE IF EXISTS " + TABLE_PLAN);
        db.execSQL("DROP TABLE IF EXISTS " + TABLE_ROUTE);
        db.execSQL("DROP TABLE IF EXISTS " + TABLE_MARKERLIST);
        db.execSQL("DROP TABLE IF EXISTS " + TABLE_MARKER);

        onCreate(db);
    }
    public long createPlan(Plan plan){ // make another create without date //default plan name is city name.
        SQLiteDatabase db = this.getWritableDatabase();

        ContentValues values = new ContentValues();
        values.put(KEY_TITLE,plan.getTitle());
        values.put(KEY_CITY,plan.getCity());
        values.put(KEY_LATITUDE,plan.getCentre().latitude);
        values.put(KEY_LONGITUDE,plan.getCentre().longitude);
        values.put(KEY_YEAR,plan.getYear());
        values.put(KEY_MONTH,plan.getMonth());
        values.put(KEY_DAY,plan.getDay());

        //insert a row to table plan
        long plan_id = db.insert(TABLE_PLAN,null,values);
        plan.setId(plan_id);
        Log.d("create plan init : ",plan.init()+"");


        //assigning route
        ArrayList<Route> routes = plan.getRoutesList();

        if(!routes.isEmpty()){
            Iterator<Route> iterator = routes.iterator();
            Route cur;

            while(iterator.hasNext()){
                cur = iterator.next();
                createRoute(plan_id,cur);
            }
            Log.d("INITIAL ROUTE NUM : ",routes.size()+"*******");
/*
            for (long route_id : route_id_List){
                createRouteList(plan_id,route_id); //link routes to the plan
            }
*/
        }

        return plan_id; //call by ref
    }
    public long createRoute(long plan_id,Route route){
        SQLiteDatabase db = this.getWritableDatabase();

        ContentValues values = new ContentValues();
        values.put(KEY_INDEX,route.getIndex());
        values.put(KEY_PLAN_ID,plan_id);

        long route_id = db.insert(TABLE_ROUTE,null,values);
        route.setId(route_id);


 /*       //assigning markerlist
        ArrayList<Marker> markers = route.getMarkerList();
        Iterator<Marker> iterator = markers.iterator();
        Marker cur;

        while (iterator.hasNext()){
            cur = iterator.next();
            createMarkerList(plan_id,route_id,cur);
        }
        *///----update route

        /*
        long[] marker_id_List = new long[markers.size()];
        int i=0;

        while(iterator.hasNext()){
            cur = iterator.next();
            marker_id_List[i++]=createMarker(cur,plan_id);
        }

        for (long marker_id : marker_id_List){
            createMarkerList(route_id,marker_id); //link routes to the plan
        }
*/
        return route_id;
    }
    public long createMarkerList(long plan_id,long route_id,Marker marker){
        SQLiteDatabase db = this.getWritableDatabase();
        String selectQuery = "SELECT * FROM "+ TABLE_MARKER + " WHERE "+KEY_PLAN_ID+ " = '"+plan_id+"'"
                +" AND "+KEY_LATITUDE + " = '" +marker.getPosition().latitude+"'"
                +" AND "+KEY_LONGITUDE+ " = '" +marker.getPosition().longitude+"'";
        Cursor c = db.rawQuery(selectQuery,null);

        if(c!=null && c.getCount()!=0) {
            c.moveToFirst();

            ContentValues values = new ContentValues();
            values.put(KEY_ROUTE_ID, route_id);
            values.put(KEY_MARKER_ID, c.getLong(c.getColumnIndex(KEY_ID)));

            return db.insert(TABLE_MARKERLIST, null, values);
        }
        return -1;
    }
/*
    public long createMarkerList(long route_id,long marker_id){
        SQLiteDatabase db = this.getWritableDatabase();

        ContentValues values = new ContentValues();
        values.put(KEY_ROUTE_ID,route_id);
        values.put(KEY_MARKER_ID,marker_id);

        return db.insert(TABLE_MARKERLIST,null,values);
    }

    public long createMarkerList(long route_id,Marker marker){
        SQLiteDatabase db = this.getWritableDatabase();

        String selectQuery = "SELECT * FROM "+TABLE_MARKER+ " WHERE "+ KEY_GET_ID + " = '" +marker.getId()+"' ";
        Cursor c = db.rawQuery(selectQuery,null);

        if(c!=null && c.getCount()!=0){

            c.moveToFirst();
            ContentValues values = new ContentValues();
            values.put(KEY_ROUTE_ID,route_id);
            values.put(KEY_MARKER_ID,c.getLong(c.getColumnIndex(KEY_ID)));

            return db.insert(TABLE_MARKERLIST,null,values);
        }
        return 0;
    }
*/
    public long createMarker(Marker marker,long plan_id){
        SQLiteDatabase db = this.getWritableDatabase();

        ContentValues values = new ContentValues();
        values.put(KEY_GET_ID,marker.getId());
        values.put(KEY_PLAN_ID,plan_id);
        LatLng position = marker.getPosition();
        values.put(KEY_LATITUDE,position.latitude);
        values.put(KEY_LONGITUDE,position.longitude);
        values.put(KEY_TITLE,marker.getTitle());
        values.put(KEY_ICON,Integer.parseInt(marker.getTag().toString())); //0-3

        return db.insert(TABLE_MARKER,null,values);
    }


    /////////read DB

    public Plan getPlan(long plan_id){ //light version
        SQLiteDatabase db = getReadableDatabase();

        String selectQuery = "SELECT * FROM "+TABLE_PLAN+ " WHERE "+ KEY_ID + " = '" +plan_id+"' ";
        Cursor c = db.rawQuery(selectQuery,null);

        if(c!=null&&c.getCount()!=0){
            c.moveToFirst();
            Plan plan = new Plan();
            plan.setId(c.getInt(c.getColumnIndex(KEY_ID)));
            plan.setTitle(c.getString(c.getColumnIndex(KEY_TITLE)));
            plan.setCity(c.getString(c.getColumnIndex(KEY_CITY)));

            double lat = c.getDouble(c.getColumnIndex(KEY_LATITUDE));
            double log = c.getDouble(c.getColumnIndex(KEY_LONGITUDE));
            plan.setCentre(new LatLng(lat,log));

            plan.setY(c.getInt(c.getColumnIndex(KEY_YEAR)));
            plan.setM(c.getInt(c.getColumnIndex(KEY_MONTH)));
            plan.setD(c.getInt(c.getColumnIndex(KEY_DAY)));
            plan.init();

            return plan;
        }
        return null;
    }

    public Plan getPlan(long plan_id,GoogleMap map,BitmapDescriptor[] icon){ //full version
        SQLiteDatabase db = getReadableDatabase();

        String selectQuery = "SELECT * FROM "+TABLE_PLAN+ " WHERE "+ KEY_ID + " = '" +plan_id+"' ";
        Cursor c = db.rawQuery(selectQuery,null);

        if(c!=null && c.getCount()!=0){
            c.moveToFirst();
        Plan plan = new Plan();
        plan.setId(c.getInt(c.getColumnIndex(KEY_ID)));
        plan.setTitle(c.getString(c.getColumnIndex(KEY_TITLE)));
<<<<<<< HEAD
        plan.setCity(c.getString(c.getColumnIndex(KEY_CITY)));

        double lat = c.getDouble(c.getColumnIndex(KEY_LATITUDE));
        double log = c.getDouble(c.getColumnIndex(KEY_LONGITUDE));
        plan.setCentre(new LatLng(lat,log));

        plan.setRoutesList(getRouteList(plan_id,map,icon));
=======
       //plan.setRoutesList(getRouteList(plan_id));
>>>>>>> a655105b80377628e7da567d9a2695c574952396
        plan.setY(c.getInt(c.getColumnIndex(KEY_YEAR)));
        plan.setM(c.getInt(c.getColumnIndex(KEY_MONTH)));
        plan.setD(c.getInt(c.getColumnIndex(KEY_DAY)));
        Log.d("get plan init : ",plan.init()+"");
        //plan.init();

        return plan;
        }
        return null;
    }

<<<<<<< HEAD
    public ArrayList<Route> getRouteList(long plan_id,GoogleMap map,BitmapDescriptor[] icon){
=======
    /*public ArrayList<Route> getRouteList(long plan_id){
>>>>>>> a655105b80377628e7da567d9a2695c574952396
        SQLiteDatabase db = getReadableDatabase();
        ArrayList<Route> list = new ArrayList<>();

        String selectQuery = "SELECT * FROM "+TABLE_ROUTE+ " WHERE "+ KEY_PLAN_ID + " = '" +plan_id+"'";
        Cursor c = db.rawQuery(selectQuery,null);

        // looping through all rows and adding to list
        if (c!=null && c.getCount()!=0) {
            c.moveToFirst();
            do {
                Route r =  getRoute(c.getLong(c.getColumnIndex(KEY_ID)),map,icon);
                list.add(r);
            } while (c.moveToNext());
        }
        return null;
    }

<<<<<<< HEAD
    public int getRouteListCount(long plan_id){
        SQLiteDatabase db = getReadableDatabase();

        String selectQuery = "SELECT * FROM "+TABLE_ROUTE+ " WHERE "+ KEY_PLAN_ID + " = '" +plan_id+"'";
        Cursor c = db.rawQuery(selectQuery,null);

        return c.getCount();
    }
=======
    }*/
>>>>>>> a655105b80377628e7da567d9a2695c574952396

    public Route getRoute(long route_id,GoogleMap map,BitmapDescriptor[] icon){
        SQLiteDatabase db = getReadableDatabase();

        String selectQuery = "SELECT * FROM "+TABLE_ROUTE+ " WHERE "+ KEY_ID + " = '" +route_id+"'";
        Cursor c = db.rawQuery(selectQuery,null);

        if(c!=null && c.getCount()!=0) {
            c.moveToFirst();
            Route route = new Route(-1, "#000000");
            route.setId(c.getInt(c.getColumnIndex(KEY_ID)));
            route.setRouteColor("#3C989E");
            route.setIndex(c.getInt(c.getColumnIndex(KEY_INDEX)));
            route.setMarkerList(map,getMarkerList(route_id,map,icon));
            route.init(map);

            return route;
        }
        return null;
    }
    /*
    public ArrayList<MarkerOptions> getMarkerListOpt(long route_id){
        SQLiteDatabase db = getReadableDatabase();
        ArrayList<MarkerOptions> list = new ArrayList<>();

        String selectQuery = "SELECT * FROM "+ TABLE_MARKERLIST + " ml, " + TABLE_MARKER + " tm "
                + "WHERE ml."+ KEY_ROUTE_ID + " = '" +route_id+ "' "
                + "AND ml."+KEY_MARKER_ID + " = tm." +KEY_ID;
        Cursor c = db.rawQuery(selectQuery,null);

        // looping through all rows and adding to list
        if (c.moveToFirst()) {
            do {
                MarkerOptions opt = getMarkerOption(c.getString(c.getColumnIndex(KEY_GET_ID)));
                list.add(opt);
            } while (c.moveToNext());
        }
        return list;
    }*/
    public ArrayList<Marker> getMarkerList(long route_id,GoogleMap map,BitmapDescriptor[] icon){
        SQLiteDatabase db = getReadableDatabase();
        ArrayList<Marker> mlist = new ArrayList<>();

        String selectQuery = "SELECT * FROM "+TABLE_MARKERLIST+ " WHERE "+ KEY_ROUTE_ID + " = '" +route_id+"'";
        Cursor c = db.rawQuery(selectQuery,null);

        // looping through all rows and adding to list
        if (c!=null && c.getCount()!=0) {
            c.moveToFirst();
            do {
                mlist.add(getMarker(c.getLong(c.getColumnIndex(KEY_MARKER_ID)),map,icon));
            } while (c.moveToNext());
        }
        Log.d(route_id+" NUM : ",mlist.size()+"*****************");
        return mlist;
    }
    public Marker getMarker(long marker_id,GoogleMap map,BitmapDescriptor[] icon){
        SQLiteDatabase db = getReadableDatabase();

        String selectQuery = "SELECT * FROM "+ TABLE_MARKER + " WHERE "+KEY_ID+ " = '"+marker_id+"'";
        Cursor c = db.rawQuery(selectQuery,null);

        if(c!=null && c.getCount()!=0) {
            c.moveToFirst();

            MarkerOptions opt = new MarkerOptions();
            opt.draggable(true);
            opt.position(new LatLng(c.getDouble(c.getColumnIndex(KEY_LATITUDE)),c.getDouble(c.getColumnIndex(KEY_LONGITUDE))));
            opt.title(c.getString(c.getColumnIndex(KEY_TITLE)));
            opt.icon(icon[c.getInt(c.getColumnIndex(KEY_ICON))]);

            Marker m =map.addMarker(opt);
            m.setTag(c.getInt(c.getColumnIndex(KEY_ICON)));
            m.setSnippet(c.getString(c.getColumnIndex(KEY_ID)));
            return m;
        }
        return null;
    }
    public void getALLMarkers(long plan_id, GoogleMap map, BitmapDescriptor[] icon){ //include even if not assign with any route.
        SQLiteDatabase db = getReadableDatabase();

        String selectQuery = "SELECT * FROM "+ TABLE_MARKER +" WHERE "+KEY_PLAN_ID+" = '"+plan_id+"'";
        Cursor c = db.rawQuery(selectQuery,null);

        if(c!=null && c.getCount()!=0) {
            c.moveToFirst();
            do{
                MarkerOptions opt = new MarkerOptions();
                opt.draggable(true);
                opt.position(new LatLng(c.getDouble(c.getColumnIndex(KEY_LATITUDE)),c.getDouble(c.getColumnIndex(KEY_LONGITUDE))));
                opt.title(c.getString(c.getColumnIndex(KEY_TITLE)));
                opt.icon(icon[c.getInt(c.getColumnIndex(KEY_ICON))]);

                Marker m =map.addMarker(opt);
                m.setTag(c.getInt(c.getColumnIndex(KEY_ICON)));
                m.setSnippet(c.getString(c.getColumnIndex(KEY_ID)));
            } while (c.moveToNext());
        }
    }


    //update
    public int updatePlan(Plan plan) {
        SQLiteDatabase db = this.getWritableDatabase();

        ContentValues values = new ContentValues();
        values.put(KEY_TITLE,plan.getTitle());
    /*  values.put(KEY_CITY,plan.getCity());
        values.put(KEY_LATITUDE,plan.getCentre().latitude);
        values.put(KEY_LONGITUDE,plan.getCentre().longitude);
    */  values.put(KEY_YEAR,plan.getYear());
        values.put(KEY_MONTH,plan.getMonth());
        values.put(KEY_DAY,plan.getDay());

        // updating plan date
        return db.update(TABLE_PLAN, values, KEY_ID + " = ?", new String[] { String.valueOf(plan.getId()) });
    }
    public int updateMarker(Marker marker,long plan_id){
        SQLiteDatabase db = this.getWritableDatabase();
        String selectQuery = "SELECT * FROM "+ TABLE_MARKER + " WHERE " + KEY_PLAN_ID +" '"+plan_id+"' "
                +" AND "+KEY_LATITUDE + " = '" +marker.getPosition().latitude+"'"
                +" AND "+KEY_LONGITUDE+ " = '" +marker.getPosition().longitude+"'";
        Cursor c = db.rawQuery(selectQuery,null);

        if(c!=null && c.getCount()!=0){
            c.moveToFirst();

            ContentValues values = new ContentValues();
            values.put(KEY_GET_ID,marker.getId());
            values.put(KEY_LATITUDE,marker.getPosition().latitude);
            values.put(KEY_LONGITUDE,marker.getPosition().longitude);
            values.put(KEY_TITLE,marker.getTitle());
            values.put(KEY_ICON,Integer.parseInt(marker.getTag().toString()));

            return db.update(TABLE_MARKER,values,KEY_ID + " = ?",new String[]{ String.valueOf(c.getLong(c.getColumnIndex(KEY_ID))) });
        }
        return -1;
    }

    //delete
    public void deleteMarkerList(long plan_id,Marker marker){ //because the marker was removed
        SQLiteDatabase db = this.getWritableDatabase();
        String selectQuery = "SELECT * FROM "+ TABLE_MARKER + " WHERE " + KEY_PLAN_ID +" '"+plan_id+"' "
                +" AND "+KEY_LATITUDE + " = '" +marker.getPosition().latitude+"'"
                +" AND "+KEY_LONGITUDE+ " = '" +marker.getPosition().longitude+"'";
        Cursor c = db.rawQuery(selectQuery,null);

        if(c!=null && c.getCount()!=0){
            c.moveToFirst();

            while(db.delete(TABLE_MARKERLIST,KEY_MARKER_ID+" = ?",new String[]{ String.valueOf(c.getLong(c.getColumnIndex(KEY_ID)))})>0){
            }
/*            do {
                db.delete(TABLE_MARKERLIST, KEY_MARKER_ID + " = ?", new String[]{String.valueOf(c.getLong(c.getColumnIndex(KEY_MARKER_ID)))});
            }while (c.moveToNext());
*/        }
    }
    public void deleteMarkerList(long plan_id,long marker_id){ //because the marker was removed
        SQLiteDatabase db = this.getWritableDatabase();

            while(db.delete(TABLE_MARKERLIST,KEY_MARKER_ID+" = ?",new String[]{ String.valueOf(marker_id) })>0){
            }
    }

    public void deleteMarkerList(Route route){ //because the route was removed
        SQLiteDatabase db = this.getWritableDatabase();
     /*   String selectQuery = "SELECT * FROM "+TABLE_MARKERLIST+ " WHERE "+ KEY_ROUTE_ID + " = '" +route.getId()+"' ";
        Cursor c = db.rawQuery(selectQuery,null);

        if(c!=null && c.getCount()!=0){
            c.moveToFirst();
            do {
            */

     while(db.delete(TABLE_MARKERLIST,KEY_ROUTE_ID+" = ?",new String[]{String.valueOf(route.getId())})>0){
     }
                ;
         /*   }while (c.moveToNext());
        }*/
    }
    public void deleteMarkerList(Route route,Marker marker){ // the marker was removed just from the route.
        SQLiteDatabase db = this.getWritableDatabase();
        String selectQuery = "SELECT * FROM " + TABLE_MARKERLIST + " ml, " + TABLE_MARKER + " tm "
                + "WHERE ml." +KEY_ROUTE_ID + " = '" +route.getId() +"' "
                +" AND tm."+KEY_LATITUDE + " = '" +marker.getPosition().latitude+"'"
                +" AND tm."+KEY_LONGITUDE+ " = '" +marker.getPosition().longitude+"'";

        Cursor c = db.rawQuery(selectQuery,null);
        if(c!=null && c.getCount()!=0 ){
            c.moveToFirst();
            db.delete(TABLE_MARKERLIST,KEY_ID+" = ?",new String[]{ String.valueOf(c.getInt(c.getColumnIndex(KEY_ID)))});
        }
    }
    public void deleteMarker(long plan_id,Marker marker){
        SQLiteDatabase db = this.getWritableDatabase();
        String selectQuery = "SELECT * FROM "+ TABLE_MARKER + " WHERE " + KEY_PLAN_ID +" = '"+plan_id+"'"
                +" AND "+KEY_LATITUDE + " = '" +marker.getPosition().latitude+"'"
                +" AND "+KEY_LONGITUDE+ " = '" +marker.getPosition().longitude+"'";
        Cursor c = db.rawQuery(selectQuery,null);

        if(c!=null && c.getCount()!=0) {
            c.moveToFirst();
            deleteMarkerList(plan_id, c.getLong(c.getColumnIndex(KEY_ID)));
            db.delete(TABLE_MARKER, KEY_ID + " = ?", new String[]{String.valueOf(c.getLong(c.getColumnIndex(KEY_ID)))});
        }
    }
    /*
    public void deleteRouteList(Route route){
        SQLiteDatabase db = this.getWritableDatabase();
        db.delete(TABLE_ROUTELIST,KEY_ROUTE_ID+" = ?",new String[]{String.valueOf(route.getId())});
    }*/
    public void deleteRoute(Route route){
        SQLiteDatabase db = this.getWritableDatabase();
        deleteMarkerList(route);
       // deleteRouteList(route);
        db.delete(TABLE_ROUTE,KEY_ROUTE_ID+" = ?",new String[]{String.valueOf(route.getId())});
    }
}
